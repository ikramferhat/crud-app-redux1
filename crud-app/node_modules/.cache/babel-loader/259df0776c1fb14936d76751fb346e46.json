{"ast":null,"code":"var _jsxFileName = \"/home/ikram/Desktop/WORK/crudApp/crud-app/src/components/crud/AddUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as Yup from 'yup';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport { addUser } from '../../redux/actions/actions';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      marginBottom: theme.spacing(2),\n      width: '100%'\n    }\n  }\n}));\n\nconst AddUser = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const Schema = Yup.object().shape({\n    email: Yup.string().email().required('Email is required'),\n    firstname: Yup.string().required('first name is required')\n  });\n\n  const onAdd = user => {\n    return function (dispatch) {\n      axios({\n        method: 'post',\n        url: 'http://localhost:5000/users',\n        data: user,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'sometoken'\n        }\n      }).then(ress => {\n        dispatch(addUser());\n      });\n    };\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      firstname: '',\n      gender: 'female'\n    },\n    validationSchema: Schema,\n    onSubmit: (values, _ref) => {\n      let {\n        setSubmitting\n      } = _ref;\n      const payload = {\n        email: values.email,\n        firstname: values.firstname,\n        gender: values.gender\n      };\n      console.log('DData===>', payload);\n      dispatch(onAdd(payload)).finally(() => {\n        setSubmitting(false);\n        navigate(\"/\");\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    values,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      margin: \"0 auto\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      style: {\n        padding: \"0px 4%\",\n        background: 'red'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ADD USER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginBottom: \"20px\"\n        },\n        onClick: () => navigate(\"/\"),\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"GO BACK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          autoComplete: \"off\",\n          noValidate: true,\n          onSubmit: formik.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First Name\",\n            ...getFieldProps('firstname'),\n            error: Boolean(touched.firstname && errors.firstname),\n            helperText: touched.firstname && errors.firstname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Email\",\n            ...getFieldProps('email'),\n            error: Boolean(touched.email && errors.email),\n            helperText: touched.email && errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            label: \"Gender\",\n            ...getFieldProps('gender'),\n            SelectProps: {\n              native: true\n            },\n            helperText: \"Please select your gender\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"male\",\n              children: \"Male\"\n            }, \"male\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"female\",\n              children: \"Female\"\n            }, \"female\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            style: {\n              marginTop: \"10px\"\n            },\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"ADD USER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AddUser, \"TIqfTf+9bMH0XjE+kK4C63wfM7k=\", false, function () {\n  return [useStyles, useDispatch, useNavigate, useFormik];\n});\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["/home/ikram/Desktop/WORK/crudApp/crud-app/src/components/crud/AddUser.js"],"names":["React","useState","useFormik","Form","FormikProvider","Yup","TextField","Grid","Button","makeStyles","useNavigate","axios","addUser","useSelector","useDispatch","useStyles","theme","root","marginBottom","spacing","width","AddUser","classes","dispatch","navigate","Schema","object","shape","email","string","required","firstname","onAdd","user","method","url","data","headers","Authorization","then","ress","formik","initialValues","gender","validationSchema","onSubmit","values","setSubmitting","payload","console","log","finally","errors","touched","getFieldProps","display","justifyContent","margin","padding","background","handleSubmit","Boolean","native","marginTop"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as Yup from 'yup';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid,Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useNavigate} from 'react-router-dom';\nimport axios from \"axios\"\nimport {addUser} from '../../redux/actions/actions'\nimport {useSelector, useDispatch} from \"react-redux\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n        marginBottom: theme.spacing(2),\n         width: '100%',\n    }\n    },\n  }));\n\n \nconst AddUser = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const Schema = Yup.object().shape({\n      email: Yup.string().email().required('Email is required'),\n      firstname: Yup.string().required('first name is required')\n    });\n\n    const onAdd = (user) => {\n      return function(dispatch){\n        axios({\n          method: 'post',\n          url:'http://localhost:5000/users',\n          data:user,\n          headers: {\n            'Content-Type': 'application/json',\n             Authorization: 'sometoken'\n            },\n        })\n        .then((ress)=>{\n          dispatch(addUser())\n        })    \n      }\n    }\n\n    const formik = useFormik({\n      initialValues: {\n        email: '',\n        firstname: '',\n        gender: 'female'\n      },\n      validationSchema: Schema,\n      onSubmit: (values, { setSubmitting }) => {\n        const payload = {\n          email: values.email,\n          firstname: values.firstname,\n          gender: values.gender\n        };\n        console.log('DData===>', payload);\n        dispatch(onAdd(payload)).finally(() => {\n          setSubmitting(false);\n          navigate(\"/\")\n        });\n      }\n    });\n\n    const { errors, touched, values, getFieldProps } = formik;\n\n    return (\n      <Grid container style={{display: \"flex\", justifyContent:\"flex-start\" ,margin:\"0 auto\"}}>\n        <Grid item xs={12} sm={8} style={{padding: \"0px 4%\", background:'red'}}>           \n          <h3>ADD USER</h3>         \n          <Button style={{marginBottom:\"20px\"}} onClick={()=>  navigate(\"/\")}  variant=\"contained\" color=\"primary\">GO BACK</Button>             \n          <FormikProvider value={formik}>\n            <Form autoComplete=\"off\" noValidate onSubmit={formik.handleSubmit}>                \n              <TextField\n                fullWidth\n                label=\"First Name\"\n                {...getFieldProps('firstname')}\n                error={Boolean(touched.firstname && errors.firstname)}\n                helperText={touched.firstname && errors.firstname}\n              />\n              <TextField\n                fullWidth\n                label=\"Email\"\n                {...getFieldProps('email')}\n                error={Boolean(touched.email && errors.email)}\n                helperText={touched.email && errors.email}\n              />\n              <TextField                   \n                select\n                label=\"Gender\"\n                {...getFieldProps('gender')}\n                SelectProps={{native: true}}\n                helperText=\"Please select your gender\"\n              >\n                <option key=\"male\" value=\"male\">Male</option>\n                <option key=\"female\" value=\"female\">Female</option>\n              </TextField>\n              <Button type='submit' style={{marginTop:\"10px\"}} variant=\"contained\" color=\"primary\">ADD USER</Button>\n            </Form>\n          </FormikProvider>\n        </Grid>\n      </Grid>\n    )\n  }\n\nexport default AddUser\n"]},"metadata":{},"sourceType":"module"}