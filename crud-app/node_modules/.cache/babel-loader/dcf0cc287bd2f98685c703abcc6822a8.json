{"ast":null,"code":"var _jsxFileName = \"/home/ikram/Desktop/WORK/crudApp/crud-app/src/components/crud/AddUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as Yup from 'yup';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid, Button, Avatar, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport { addUser } from '../../redux/actions/actions';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport img from './Default.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(2)\n  }\n}));\n\nconst AddUser = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [avatarPreview, setAvatarPreview] = useState(img);\n  const hiddenFileInput = React.useRef(null);\n\n  const handleClick = event => {\n    hiddenFileInput.current.click();\n  };\n\n  const Schema = Yup.object().shape({\n    email: Yup.string().email().required('Email is required'),\n    firstname: Yup.string().required('first name is required')\n  });\n\n  const onAdd = user => {\n    return function (dispatch) {\n      axios({\n        method: 'post',\n        url: 'http://localhost:5000/users',\n        data: user,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'sometoken'\n        }\n      }).then(ress => {\n        dispatch(addUser());\n      });\n    };\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      avatar: [],\n      email: '',\n      firstname: '',\n      gender: 'female'\n    },\n    validationSchema: Schema,\n    onSubmit: (values, _ref) => {\n      let {\n        setSubmitting\n      } = _ref;\n      const payload = {\n        email: values.email,\n        firstname: values.firstname,\n        gender: values.gender\n      };\n      console.log('DData===>', payload);\n      dispatch(onAdd(payload)).finally(() => {\n        setSubmitting(false);\n        navigate(\"/\");\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    values,\n    getFieldProps,\n    setFieldValue\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      style: {\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ADD USER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginBottom: \"20px\"\n        },\n        onClick: () => navigate(\"/\"),\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"GO BACK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          autoComplete: \"off\",\n          noValidate: true,\n          onSubmit: formik.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"primary\",\n            \"aria-label\": \"upload picture\",\n            component: \"span\",\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              alt: \"ikram\",\n              classes: {\n                root: classes.large\n              },\n              src: avatarPreview || (values === null || values === void 0 ? void 0 : values.avatar)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            style: {\n              display: 'none'\n            },\n            multiple: false,\n            ref: hiddenFileInput,\n            type: \"file\",\n            name: \"avatar\",\n            onChange: event => {\n              setFieldValue('avatar', event.currentTarget.files[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.root,\n            fullWidth: true,\n            label: \"First Name\",\n            ...getFieldProps('firstname'),\n            error: Boolean(touched.firstname && errors.firstname),\n            helperText: touched.firstname && errors.firstname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.root,\n            fullWidth: true,\n            label: \"Email\",\n            ...getFieldProps('email'),\n            error: Boolean(touched.email && errors.email),\n            helperText: touched.email && errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.root,\n            fullWidth: true,\n            select: true,\n            ...getFieldProps('gender'),\n            SelectProps: {\n              native: true\n            },\n            helperText: \"Please select your gender\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"male\",\n              children: \"Male\"\n            }, \"male\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"female\",\n              children: \"Female\"\n            }, \"female\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            style: {\n              marginTop: \"10px\"\n            },\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"ADD USER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AddUser, \"iYBr+CRCsigLo7sLv1LXlbYxzrk=\", false, function () {\n  return [useStyles, useDispatch, useNavigate, useFormik];\n});\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["/home/ikram/Desktop/WORK/crudApp/crud-app/src/components/crud/AddUser.js"],"names":["React","useState","useFormik","Form","FormikProvider","Yup","TextField","Grid","Button","Avatar","IconButton","makeStyles","useNavigate","axios","addUser","useSelector","useDispatch","img","useStyles","theme","root","margin","spacing","AddUser","classes","dispatch","navigate","avatarPreview","setAvatarPreview","hiddenFileInput","useRef","handleClick","event","current","click","Schema","object","shape","email","string","required","firstname","onAdd","user","method","url","data","headers","Authorization","then","ress","formik","initialValues","avatar","gender","validationSchema","onSubmit","values","setSubmitting","payload","console","log","finally","errors","touched","getFieldProps","setFieldValue","padding","marginBottom","handleSubmit","large","display","currentTarget","files","Boolean","native","marginTop"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as Yup from 'yup';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid, Button, Avatar, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useNavigate} from 'react-router-dom';\nimport axios from \"axios\"\nimport {addUser} from '../../redux/actions/actions'\nimport {useSelector, useDispatch} from \"react-redux\"\nimport img from './Default.png'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(2)\n    }\n  }));\n\n \nconst AddUser = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [avatarPreview, setAvatarPreview] = useState(img);\n\n    const hiddenFileInput = React.useRef(null);\n    const handleClick = (event) => {\n      hiddenFileInput.current.click();\n    };\n\n    const Schema = Yup.object().shape({\n      email: Yup.string().email().required('Email is required'),\n      firstname: Yup.string().required('first name is required')\n    });\n\n    const onAdd = (user) => {\n      return function(dispatch){\n        axios({\n          method: 'post',\n          url:'http://localhost:5000/users',\n          data:user,\n          headers: {\n            'Content-Type': 'application/json',\n             Authorization: 'sometoken'\n            },\n        })\n        .then((ress)=>{\n          dispatch(addUser())\n        })    \n      }\n    }\n\n    const formik = useFormik({\n      initialValues: {\n        avatar: [],\n        email: '',\n        firstname: '',\n        gender: 'female'\n      },\n      validationSchema: Schema,\n      onSubmit: (values, { setSubmitting }) => {\n        const payload = {\n          email: values.email,\n          firstname: values.firstname,\n          gender: values.gender\n        };\n        console.log('DData===>', payload);\n        dispatch(onAdd(payload)).finally(() => {\n          setSubmitting(false);\n          navigate(\"/\")\n        });\n      }\n    });\n\n    const { errors, touched, values, getFieldProps, setFieldValue } = formik;\n\n    return (\n      <Grid container justifyContent='center'>\n        <Grid item xs={12} sm={8} style={{padding: \"20px\"}}>           \n          <h3>ADD USER</h3>         \n          <Button style={{marginBottom:\"20px\"}} onClick={()=>  navigate(\"/\")}  variant=\"contained\" color=\"primary\">GO BACK</Button>             \n          <FormikProvider value={formik}>\n            <Form autoComplete=\"off\" noValidate onSubmit={formik.handleSubmit}>\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n              >\n                <Avatar\n                  alt=\"ikram\"\n                  classes={{ root: classes.large }}\n                  src={avatarPreview || values?.avatar}\n                />\n              </IconButton>\n              <input\n                type=\"file\"\n                style={{ display: 'none' }}\n                multiple={false}\n                ref={hiddenFileInput}\n                type=\"file\"\n                name=\"avatar\"\n                onChange={(event) => {\n                  setFieldValue('avatar', event.currentTarget.files[0]);\n                }}\n              />             \n              <TextField\n                className={classes.root}\n                fullWidth\n                label=\"First Name\"\n                {...getFieldProps('firstname')}\n                error={Boolean(touched.firstname && errors.firstname)}\n                helperText={touched.firstname && errors.firstname}\n              />\n              <TextField\n                className={classes.root}\n                fullWidth\n                label=\"Email\"\n                {...getFieldProps('email')}\n                error={Boolean(touched.email && errors.email)}\n                helperText={touched.email && errors.email}\n              />\n              <TextField  \n                className={classes.root}\n                fullWidth                 \n                select\n                {...getFieldProps('gender')}\n                SelectProps={{native: true}}\n                helperText=\"Please select your gender\"\n              >\n                <option key=\"male\" value=\"male\">Male</option>\n                <option key=\"female\" value=\"female\">Female</option>\n              </TextField>\n              <Button type='submit' style={{marginTop:\"10px\"}} variant=\"contained\" color=\"primary\">ADD USER</Button>\n            </Form>\n          </FormikProvider>\n        </Grid>\n      </Grid>\n    )\n  }\n\nexport default AddUser\n"]},"metadata":{},"sourceType":"module"}